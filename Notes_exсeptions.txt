Отказоустойчивое приложеие - приложение, которое может продолжать свою работу при возниктовении некритичных ошибок
1. разработчик не учел ситуацию, которая привела к ошибке
2. ошибка внешней среды, на которую не распространяется действие приложения
3. в используемой библиотеке есть баги, которые не позволяют корректно выполнять задачу

код ошибки - это целочисленный код, указывающий на причину ошибки
недостатки: е всега можно отличить код ошибки от результата
2. разработчик может забыть что возвращаются коды ошибок и не обработать их
3. нельзя заставить на этапе компиляции проверять критические ошибки
4. нет подробной информации почему возникла ошибка
5. не возвращается одновременно 2 типа данных

Исключения Exceptions - специальный тип обьектов, которые создаются при возникновении ошибочной ситуации и выбрасываются джава машиной

throw new RuntimeException("текст ошибки") - бросить свою ошибку в коде

при проброске 2 исклчений,выпадает только первое, потом выполнение останавливается

Типы исключений: 
ArithmeticException арифметическая ошибка
ArrayIndexOutOfВoundsException выход индекса за пределы массива
ClassCastException неверное приведение типов
IllegalArgumentException употребление недопустимого агрумента при вывзове метода
NumberFormatException неверное преобразование строки в числовой формат
IOException произошла ошибка с потомками ввода-вывода, например сетевое соединение разорвалось
FileNotFoundException файл не найден
ClassNotFoundException класс не найден
UnsupportedOperationException попытка выполнения нереализованного метода
NullPointerException обращение к несуществующему объекту


Все исключения являются подклассами Throwable
Далее
1. Error -  ошибки Java машины, при котором приложение падает(например переполнение памяти)
            гарантированно роняется программа и оставялет логи
            нельзя обрабатывать
            надо проектировать чтобы куча не переполнялась
            либо заранее увеличить размер
2. Exception исключения
    2.1 Checked - исключения которые обязаны отработать, потому что будет ошибка на этапе компиляции 
            др подклассы Exception
            IOException
                EOFException
                FileNotFoundException
                MalformedURLException
                UnknownHostException
            ClassNotFoundException
            CloneNotSupportedException
    2.2 Uncheched - класс RuntimeException и его подклассы деление на ноль или ошибочная индексация массивов. Можно обрабатывать, можно не обрабатывать.
            RuntimeException
                NullPointerException
                IndexOutOfВoundsException
                    ArrayIndexOutOfВoundsException
                IllegalArgumentException
                    NumberFormatException
                ClassCastException
                ArithmeticException
                Др подклассы RuntimeException

Обработать исключение можно 2 способами:
1. Пробросить с помощью throws исключение методу на уровень выше, то есть методу, вызывающему текущий.
2. Поместить код, бросающий исключение, в блок try-catch


try { //код в котором потенциально может возникнуть исключение
    код
} catch (ArithmeticException e){ //перехват исключения указанного типа 
    код
} catch (ArrayIndexOutOfВoundsException | NullPointerException e){ //перехват нескольких типов 
 System.out.println("Catch Exception: " + e.getClass().getSimpleName()); //выводим имя конкретного Exception
} catch (Exception e){ //перехват вообще всех исключений 
        e.getMessage()- получить сообщение из проброшенной ошибки  
} finally { //код который выполнится в любом случае, при возникновении исключений или нет. используется для обязательного закрытия системных ресурсов
//Если требуется обработать несколько типов, обработка исключений должна идти от наследника к 
родительскому классу
}

try with resourses
try(FileReader test = new FileReader("путь к файлу")){ //данный ресурс должен быть обязательно закрыт, независимо от того выполнился try или выпала ошибка
    test.read();
}catch(RuntimeException e){
    System.out.println(message);
}

try(FileReader reader = new FileReader("путь к файлу"); //данный ресурс должен быть обязательно закрыт, независимо от того выполнился try или выпала ошибка
    FileWriter writer = new FileWriter("test")){
    while(reader.ready()){
        writer.write(reader.read()); //копирование файла. после выполнения, закрываются оба потока
    }
}catch(RuntimeException e){
    System.out.println(message);
}
интерфейс AutoClossable - должны наследовать все типы, которые используются в круглых скобках try 

throws - пробрасывает checked исключение выше по стеку 

можно создать свое исключение
public class SavedException extends IOException {
    public SavedException(String message, Exception e){
        super(message, e);
    }
}



